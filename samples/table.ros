#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(:uiop :trivia :trivia.ppcre :split-sequence :iterate :alexandria) :silent t)
  )

(defpackage :ros.script.table.3713302966
  (:use :cl :split-sequence :iterate :trivia :trivia.ppcre :alexandria)
  (:import-from :uiop :run-program))
(in-package :ros.script.table.3713302966)

(defun grep (&rest args)
  (run-program `("grep" ,@args) :output '(:string :stripped t) :ignore-error-status t))

(defparameter *db* (make-hash-table :test 'equal))

(defun name (f)
  (multiple-value-match (grep "_discriminator" f)
    (((split* " " _ name _) _ 0)
     name)))

(defun main (&rest files)
  (declare (ignorable files))
  (iter (for f in files)
        (multiple-value-match (grep "action_discriminator" f)
          ((_ _ 0)
           (ad f)))
        (multiple-value-match (grep "state_discriminator" f)
          ((_ _ 0)
           (sd f))))
  (output))

(defvar *threshold* 0.01)
(defun threshold (x)
  (if (< x *threshold*)
      (format nil "$<$~a" *threshold*)
      x))

(defun ad (f &aux (name (name f)))
  (let ((entry (ensure-gethash name *db* (make-array 6 :initial-element :N/A))))
    (match* ((split-sequence #\Space (grep "type1 error:" f))
             (split-sequence #\Space (grep "type2 error:" f))
             (split-sequence #\Space (grep "type2 error (w/o invalid states by sd3):" f))
             (split-sequence #\Space (grep "type2 error (w/o invalid states by validator):" f)))
      (((last (list (read t1) _) 2)
        (last (list (read t2) _) 2)
        (last (list (read t2s) _) 2)
        (last (list (read t2v) _) 2))
       (setf (aref entry 2) (threshold t1)
             (aref entry 3) (threshold t2)
             (aref entry 4) (threshold t2s)
             (aref entry 5) (threshold t2v))))
    entry))

(defun sd (f &aux (name (name f)))
  (let ((entry (ensure-gethash name *db* (make-array 6 :initial-element :N/A))))
    (match (split-sequence #\Space (grep "type1 error:" f))
      ((last (list (read t1) _) 2)
       (setf (aref entry 0) (threshold t1))))
    (match (split-sequence #\Space (grep "type2 error:" f))
      ((last (list (read t2) _) 2)
       (setf (aref entry 1) (threshold t2))))
    entry))

(defun output ()
  (iter (for (k v) in-hashtable *db*)
        (format t "~a & ~{~a~^& ~}~%" k (coerce v 'list))))

;;; vim: set ft=lisp lisp:
