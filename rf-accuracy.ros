#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(:cl-json :alexandria :iterate :lparallel :trivia :function-cache) :silent t))
(declaim (sb-ext:muffle-conditions STYLE-WARNING))
(defpackage :ros.script.rf-accuracy.3775861111
  (:use :cl :cl-json :iterate :trivia :alexandria))
(in-package :ros.script.rf-accuracy.3775861111)

(defparameter lparallel:*kernel* (lparallel:make-kernel 48)) ; disk load could be the bottleneck

(defparameter *pre* "best.json")
(defparameter *eff* "best.json")
(defparameter *predir* "PRECONDITION/")
(defparameter *effdir* "EFFECT/")

(defmacro ignore-errors* (&body body)
  `(handler-case ,@body
     (error (c) (print c *error-output*) nil)))

(defun per-sample (dir)
  (let* ((pres (directory (format nil "~@{~a~}" dir *predir* "*/" *pre*)))
         (tp (lparallel:pmap-reduce #'true-positive    #'+ pres))
         (ps (lparallel:pmap-reduce #'positive-samples #'+ pres))
         (tn (lparallel:pmap-reduce #'true-negative    #'+ pres))
         (ns (lparallel:pmap-reduce #'negative-samples #'+ pres))
         (acc (ignore-errors* (float (/ (+ tp tn) (+ ps ns)))))
         (tpr (ignore-errors* (float (/ tp ps))))
         (tnr (ignore-errors* (float (/ tn ns))))
         (f-measure (ignore-errors*
                      (* 2 (/ (* tpr tnr) (+ tpr tnr))))))
    (format nil "~@{~a~^ ~}~%"
            (enough-namestring dir)     ;1
            acc                         ;2
            tpr                         ;3
            tnr                         ;4
            f-measure                   ;5
            (ignore-errors* (eff-mae dir)) ;6
            (ignore-errors* (eff-prob-bitwise dir)))))

(defun eff-mae (dir)
  (mean
   (lparallel:pmap 'vector #'accuracy (directory (format nil "~@{~a~}" dir *effdir* "*/*/" *eff*)))))

(defun prod (list)
  (reduce #'* list :initial-value 1))

(defun eff-prob-bitwise (dir)
  (mean
   (lparallel:pmap 'vector
                   (lambda (dir)
                     (prod (mapcar #'accuracy
                                   (directory (format nil "~@{~a~}" dir "*/" *eff*)))))
                   (directory (format nil "~@{~a~}" dir *effdir* "*/")))))

(function-cache:defcached json (file)
  (with-open-file (s file)
    (cl-json:decode-json s)))

(defun accuracy (file)
  (match (json file)
    ((assoc :val (assoc :accuracy v))
     v)))

(defun true-positive (file)
  (match (json file)
    ((assoc :test (assoc :true-positive s))
     s)
    (_ 0)))
(defun true-negative (file)
  (match (json file)
    ((assoc :test (assoc :true-negative s))
     s)
    (_ 0)))

(defun positive-samples (file)
  (match (json file)
    ((assoc :test (assoc :positive-samples v))
     v)
    (_ 0)))
(defun negative-samples (file)
  (match (json file)
    ((assoc :test (assoc :negative-samples v))
     v)
    (_ 0)))


#+(or)
(best-accuracy #P"/dccstor/latplan1/repos/latplan-zsae-icaps/latplan/samples/puzzle_HammingTransitionAE_spider_3_3_169_10000_0.7_1.0/EFFECT/2/0/")
#+(or)
(eff-accuracy #P"/dccstor/latplan1/repos/latplan-zsae-icaps/latplan/samples/puzzle_HammingTransitionAE_spider_3_3_169_10000_0.7_1.0/EFFECT/2/")
#+(or)
(eff-average-accuracy #P"/dccstor/latplan1/repos/latplan-zsae-icaps/latplan/samples/puzzle_HammingTransitionAE_spider_3_3_169_10000_0.7_1.0/")

;; (per-sample (first (directory "samples/*/")))

(defun main (&rest argv)
  (ematch argv
    ((list* "--pre" pre rest)
     (setf *pre* pre)
     (apply #'main rest))
    ((list* "--eff" eff rest)
     (setf *eff* eff)
     (apply #'main rest))
    ((list* "--predir" dir rest)
     (setf *predir* dir)
     (apply #'main rest))
    ((list* "--effdir" dir rest)
     (setf *effdir* dir)
     (apply #'main rest))
    (argv
     (let ((samples (or argv (directory "samples/*/"))))
       (map nil #'princ
            (sort (lparallel:pmap 'vector #'per-sample samples)
                  #'string<))))))


;;; vim: set ft=lisp lisp:
